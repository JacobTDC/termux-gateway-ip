plugins {
  alias(libs.plugins.android.application)
}

// An empty task. We'll populate the dependsOn later to extract
// the dex files for all variants.
tasks.register('extractDex') {
  description "Runs extractDex[variant] for all variants."
  group "build"
}

tasks.build.dependsOn tasks.extractDex

android {
  namespace "com.termux.gatewayip.command"

  buildTypes {
    debug {
      multiDexEnabled false
    }
    release {
      multiDexEnabled false
      minifyEnabled true
    }
  }

  dependenciesInfo {
    includeInApk false
  }

  lint {
    checkReleaseBuilds false
  }

  applicationVariants.all { variant ->
    variant.outputs.all {
      //def dexDir = "${project.buildDir.path}/outputs/dex/${variant.getName()}"
      def dexDir = layout.buildDirectory.dir("outputs/dex/${variant.getDirName()}")

      def extractDexVariant = tasks.register("extractDex${variant.getName().capitalize()}", Sync) {
        description "Extracts the dex file from the output apk for variant ${variant.getName()}."
        dependsOn variant.assembleProvider

        doFirst {
          delete dexDir
        }

        from zipTree(outputFile).matching({ include 'classes*.dex' })
        into dexDir
        fileMode 0400
      }

      /* def extractDexVariant = tasks.register("extractDex${variant.getName().capitalize()}", Exec) {
        description "Extracts the dex file from the output apk for variant ${variant.getName()}."
        dependsOn variant.assembleProvider

        doFirst {
          delete dexDir
          mkdir dexDir
        }

        workingDir dexDir
        commandLine 'd8', outputFile
      } */

      // Add this variant to the extractDex task.
      tasks.extractDex.dependsOn extractDexVariant
      tasks.buildDebugPreBundle.dependsOn extractDexVariant
    }
  }
}

dependencies {
  implementation(libs.androidx.annotation)
  compileOnly project(":command:stub")
}
